{"version":3,"sources":["logo.svg","components/Reader.js","pages/Scan.js","images/Logo.png","components/ToPrint.js","pages/Print.js","api/spreadsheetID.js","App.js","reportWebVitals.js","index.js"],"names":["Reader","todaySheet","props","video","useRef","canvasRef","useState","delayed","setDelayed","result","setResult","black","setBlack","tick","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","myFunc","setTimeout","useEffect","onScan","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","style","filter","ref","hidden","doc","GoogleSpreadsheet","require","ASCII_A","dateFormatOptions","year","month","day","scanList","scanHistory","idList","columnIndex","RecentList","list","value","push","length","shift","createHeader","tS","idIdx","nameIdx","classIdx","checkInIdx","checkOutIdx","i","entry","getCell","valueType","findHeader","header","name","id","class","checkIn","checkOut","createIds","rowIdx","ROW_RANGE","ids","lastIdx","query","String","fromCharCode","loadCells","nullCount","slice","toastProp","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","headers","Scan","useReducer","recentList","dispatch","toLocaleDateString","todayDate","setTodayDate","currentTimeSec","setCurrentTimeSec","checkId","studentRowNumber","findStudentRow","studentNumber","currentTime","getCurrentTime","toast","error","idx","action","success","warn","saveUpdatedCells","ID","toLocaleTimeString","hour12","hour","minute","getTime","parseInt","Recent","map","useServiceAccountAuth","config","loadInfo","tD","found","option","sheetsByTitle","warning","title","initialize","interval","timeSec","second","dup","className","src","Logo","alt","ToPrint","React","forwardRef","children","dateDiffInDays","a","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","Math","abs","floor","Print","setTodaySheet","todayRows","setTodayRows","QRValue","setQRValue","inputText","setInputText","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","printRef","handlePrint","useReactToPrint","content","findMostRecentSheetDate","sheetDate","today","sheetDateString","setDate","findStudents","text","results","row","includes","resultString","resultObject","toLowerCase","ts","getRows","rows","initializeWorker","sr","display","alignItems","flexDirection","backgroundColor","justifyContent","marginTop","marginBottom","marginRight","textAlign","margin","fontSize","placeholder","border","borderRadius","outline","padding","boxSizing","onChange","event","target","onClick","userSelect","cursor","size","c","App","path","element","newestOnTop","rtl","pauseOnFocusLoss","Zoom","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6187dee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from \"react\";\nimport jsQR from \"jsqr\";\n\nfunction Reader(props) {\n    const video = useRef();\n    const canvasRef = useRef();\n    const [delayed, setDelayed] = useState(false);\n    const [result, setResult] = useState();\n    const [black, setBlack] = useState(false);\n\n    useEffect(\n        function () {\n            if (result) {\n                props.onScan(result.data);\n                setBlack(true);\n                setTimeout(() => {\n                    setBlack(false);\n                }, 500);\n                setResult(null);\n            }\n        },\n        [result]\n    );\n\n    useEffect(function () {\n        const inter = setInterval(() => {\n            requestAnimationFrame(tick);\n        }, 200);\n        return () => {\n            clearInterval(inter);\n        };\n    }, []);\n\n    useEffect(\n        function () {\n            navigator.mediaDevices\n                .getUserMedia({ video: { facingMode: \"environment\" } })\n                .then(function (stream) {\n                    console.log(stream);\n                    try {\n                        video.current.srcObject = stream;\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n                        video.current.play();\n                    } catch {}\n                });\n        },\n        [video, canvasRef]\n    );\n\n    function tick() {\n        if (delayed) return;\n        if (video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\n            canvasRef.current.height = video.current.videoHeight;\n            canvasRef.current.width = video.current.videoWidth;\n\n            var canvas = canvasRef.current.getContext(\"2d\");\n\n            canvas.drawImage(\n                video.current,\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var imageData = canvas.getImageData(\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\n                inversionAttempts: \"dontInvert\",\n            });\n            if (code) {\n                console.log(code.data);\n                setResult({ data: code.data, time: new Date() });\n                // props.onScan(code.data);\n                props.myFunc();\n                // setTimeout(() => {\n                //     requestAnimationFrame(tick);\n                // }, 1000);\n                setDelayed(true);\n                setTimeout(() => {\n                    setDelayed(false);\n                }, 3000);\n            } else {\n                // setTimeout(() => {\n                //     requestAnimationFrame(tick);\n                // }, 10);\n            }\n            return;\n        } else {\n            // setTimeout(() => {\n            //     requestAnimationFrame(tick);\n            // }, 10);\n        }\n    }\n\n    return (\n        <div>\n            <video\n                style={{\n                    height: \"100%\",\n                    width: \"auto\",\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\n                }}\n                ref={video}\n            ></video>\n            <canvas ref={canvasRef} hidden></canvas>\n        </div>\n    );\n}\n\nexport default Reader;\n","import React, { useEffect, useState, useReducer } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Reader from \"../components/Reader\";\n\nimport \"./Scan.css\";\nimport Logo from \"../images/Logo.png\";\nimport config from \"../api/config\";\nimport header from \"../api/header\";\n//import { spreadsheetID } from \"../api/spreadsheetID\";\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\n\nconst spreadsheetID = '12AWolV6lI99LM6NNP1bUwYanAuNDSWRJI8X4-ozM98Q';\nconst doc = new GoogleSpreadsheet(spreadsheetID);\n\nconst MAX_COLUMN = 26;\nconst ASCII_A = 65;\nconst dateFormatOptions = [\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\n];\nconst SCAN_INTERVAL = 1000;\nconst CHECK_INTERVAL = 5000;\nconst scanList = [];\nconst scanHistory = [];\nlet idList = [];\nlet columnIndex = {};\nlet todaySheet;\n\nfunction RecentList(list, value) {\n    list.push(value);\n    if (list.length > 5)\n    {\n        console.log(\"copy from \" + list.length + \" - 5\");\n        list.shift();\n    }\n    console.log(list);\n    console.log(list.length);\n    return list;\n}\n\nfunction createHeader(tS)\n{\n    let idIdx = null;\n    let nameIdx = null;\n    let classIdx = null;\n    let checkInIdx = null;\n    let checkOutIdx = null;\n    for (let i = 0 ; i < MAX_COLUMN ; i++)\n    {\n        const entry = tS.getCell(0, i);\n        if (entry.valueType == null)\n        {\n            continue;\n        }\n        nameIdx = (findHeader(entry.value, header.name)) ? i : nameIdx;\n        idIdx = (findHeader(entry.value, header.id)) ? i : idIdx;\n        classIdx = (findHeader(entry.value, header.class)) ? i : classIdx;\n        checkInIdx = (findHeader(entry.value, header.checkIn)) ? i : checkInIdx;\n        checkOutIdx = (findHeader(entry.value, header.checkOut)) ? i : checkOutIdx;\n    }\n    return {id:idIdx, name:nameIdx, class:classIdx, checkIn:checkInIdx, checkOut:checkOutIdx};\n}\n\n\nasync function createIds(idIdx, tS)\n{\n    let rowIdx = 0;\n    const ROW_RANGE = 50;\n    let ids = [];\n    let lastIdx = null;\n    while (true)\n    {\n        // Read ROW_RANGE cell\n        const query = String.fromCharCode(ASCII_A+idIdx) + (rowIdx+1) + \":\" +\n                      String.fromCharCode(ASCII_A+idIdx) + (rowIdx+ROW_RANGE);\n        await tS.loadCells(query);\n        console.log(query);\n\n        let nullCount = 0;\n        for (let i = 0 ; i < ROW_RANGE ; i++)\n        {\n            const entry = tS.getCell(rowIdx + i, idIdx);\n            let id = null;\n            if (entry.valueType == null)\n            {\n                nullCount++;\n            }\n            else\n            {\n                id = entry.value;\n                lastIdx = rowIdx + i;\n            }\n            ids.push(id);\n        }\n        // If all ROW_RANGE cells are empty, stop reading\n        if (nullCount === ROW_RANGE)\n        {\n            break;\n        }\n        rowIdx += ROW_RANGE;\n    }\n    ids = ids.slice(0, lastIdx+1);\n\n    return ids;\n}\n\nconst toastProp = {\n    position: \"bottom-center\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n}\n\nfunction findHeader(value, headers)\n{\n    for (let h of headers)\n    {\n        if (h === value) {\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction Scan(props) {\n    const [recentList, dispatch] = useReducer(RecentList, []);\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\n\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\n\n    async function checkId(id)\n    {\n        console.log(\"handling scanning \" + id);\n\n        // Locate student in the spreadsheet today\n        let studentNumber = id;\n        let studentRowNumber = findStudentRow(studentNumber);\n        const currentTime = getCurrentTime();\n\n        if (studentRowNumber == null) {\n            // Student does not exist\n            toast.error(`❗ Student ID could not be found!`, toastProp);\n        } else {\n            // Student ID is found\n            console.log(\"Student ID: \" + studentNumber + \" Index:\" + studentRowNumber);\n            const query = String.fromCharCode(ASCII_A) + (studentRowNumber) + \":\" +\n                          String.fromCharCode(ASCII_A+MAX_COLUMN-1) + (studentRowNumber);\n            await todaySheet.loadCells(query);\n            const idx = studentRowNumber - 1;\n            const name = todaySheet.getCell(idx, columnIndex.name);\n            const checkIn = todaySheet.getCell(idx, columnIndex.checkIn);\n            const checkOut = todaySheet.getCell(idx, columnIndex.checkOut);\n\n            // Determine action to take\n            let action = null;\n            if (checkIn.valueType == null) {\n                // Check student in\n                checkIn.value = currentTime;\n                action = \"Check In\";\n\n                toast.success(\n                    `👋 Checked in ${name.value} at ${currentTime}!`, toastProp);\n            } else if (checkOut.valueType == null) {\n                // Check student out\n                checkOut.value = currentTime;\n                action = \"Check Out\";\n\n                toast.success(\n                    `🚪 Checked out ${name.value} at ${currentTime}!`, toastProp);\n            } else {\n                // Student check in and out are both filled\n                toast.warn(\n                    `🟡 ${name.value} is already accounted for!`, toastProp);\n            }\n            if (action != null)\n            {\n                console.log(action + \" \" + currentTime);\n                await dispatch([name.value, action, currentTime]);\n                await todaySheet.saveUpdatedCells();\n            }\n        }\n    }\n    useEffect(function() {\n        console.log(\"Update today data \" + todayDate);\n    }, [todayDate]);\n\n    useEffect(function () {\n        async function initialize() {\n            console.log('try to read sheet');\n            await doc.useServiceAccountAuth(config);\n            await doc.loadInfo(); // loads document properties and worksheets\n            console.log('Done');\n\n            let tD = new Date();\n            let found = false;\n            for (let option of dateFormatOptions) {\n                // console.log(tD.toLocaleDateString(\"en-US\", option));\n                if (doc.sheetsByTitle[tD.toLocaleDateString(\"en-US\", option)]) {\n                    found = true;\n                    tD = tD.toLocaleDateString(\"en-US\", option);\n                    break;\n                }\n            }\n            if (found === false)\n            {\n                toast.warning(\n                    `Please create the spreadsheet for today and reload the app to check in!`, toastProp);\n                toast.error(`❗ Could not find spreadsheet with today's date!`, toastProp);\n                return;\n            }\n            const tS = doc.sheetsByTitle[tD];\n            console.log(\"tS\");\n            console.log(tS);\n            console.log(tS.title);\n            todaySheet = tS;\n            setTodayDate(tD);\n\n            console.log(\"toasting success\");\n            toast.success(`✅ Ready to check in!`, toastProp);\n\n            // Find spreadsheet headers\n            await tS.loadCells('A1:Z1');\n            const header = createHeader(tS);\n            columnIndex = header;\n\n            // Find ID list\n            idList = await createIds(header.id, tS);\n        }\n        initialize();\n\n    }, []);\n\n    function findStudentRow(ID) {\n        console.log(\"finding student row \" + idList.length);\n        for (let i = 0 ; i < idList.length ; i++)\n        {\n            if (idList[i] != null && idList[i] === ID)\n            {\n                return i + 1;\n            }\n        }\n        return null;\n    }\n\n    function getCurrentTime() {\n        return new Date().toLocaleTimeString(\"en-US\", {\n            hour12: true,\n            hour: \"numeric\",\n            minute: \"numeric\",\n        });\n    }\n\n    async function handleScan(data) {\n        const tick = new Date().getTime();\n        console.log(\"reached function \" + tick );\n\n        console.log(data);\n        const id = parseInt(data);\n        if (id > 0)\n        {\n            scanList.push({tick:tick, id:parseInt(data)});\n        }\n\n        return;\n    }\n\n    function Recent() {\n        const header = (<tr><th>Name</th><th>action</th><th>time</th></tr>);\n        return (<table><tbody>{header}\n            {recentList.map(entry => (\n                <tr>\n                    <td key=\"name\">{entry[0]}</td>\n                    <td key=\"action\">{entry[1]}</td>\n                    <td key=\"time\">{entry[2]}</td>\n                </tr>\n               ))\n            }\n        </tbody></table>)\n    }\n\n    // Set QR code scan updater\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            const tick = new Date().getTime();\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\n                hour12: true,\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\"\n            });\n            console.log(timeSec);\n            setCurrentTimeSec(timeSec);\n            while (scanHistory.length > 0 && tick - scanHistory[0].tick > CHECK_INTERVAL)\n            {\n                scanHistory.shift();\n            }\n            while (scanList.length > 0)\n            {\n                let entry = scanList.shift();\n\n                if (tick - entry.tick > SCAN_INTERVAL)\n                {\n                   continue;\n                }\n                let dup = false;\n                for (let h of scanHistory)\n                {\n                    if (h.id === entry.id)\n                    {\n                        dup = true;\n                        break;\n                    }\n\n                }\n                if (dup)\n                {\n                    continue;\n                }\n                scanHistory.push(entry);\n                await checkId(entry.id);\n                break;\n            }\n            return () => clearInterval(interval);\n        }, 1000)}, []);\n\n    return (\n        <div className=\"scan\">\n            <div className=\"div1\" >\n                <img className=\"logo\" src={Logo} alt=\"SVKS\"/>\n                <h1>\n                    SVKS Check In/Out\n                </h1>\n            </div>\n            <div className=\"clock\">\n            {todayDate} {currentTimeSec}\n            </div>\n            <div className=\"div2\">\n                <Reader className=\"reader\"\n                    onScan={handleScan}\n                    myFunc={function () {\n                        console.log(\"helo\");\n                    }}\n                ></Reader>\n                <div className=\"recent\">\n                    Recent Check In/Out\n                    <Recent />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Scan;\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React from \"react\";\nexport const ToPrint = React.forwardRef((props, ref) => {\n    return (\n        <div\n            className=\"toPrint\"\n            ref={ref}\n            style={{\n                width: \"100%\",\n                width: \"max(calc(100vw - 30rem), 80%)\",\n                // position: \"absolute\",\n                // // top: \"-100%\",\n                // zIndex: \"-100\",\n            }}\n        >\n            {props.children}\n        </div>\n    );\n});\n\nexport default ToPrint;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport { toast } from \"react-toastify\";\nimport config from \"../api/config\";\nimport { spreadsheetID } from \"../api/spreadsheetID\";\nimport Logo from \"../images/Logo.png\";\nimport { useDebounce } from \"use-debounce\";\nimport { useReactToPrint } from \"react-to-print\";\nimport { ToPrint } from \"../components/ToPrint\";\n\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\nconst doc = new GoogleSpreadsheet(spreadsheetID);\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\nfunction dateDiffInDays(a, b) {\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\n    // Discard the time and time-zone information.\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\n}\n\nconst dateFormatOptions = [\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\n];\n\nfunction Print(props) {\n    const [todaySheet, setTodaySheet] = useState({});\n    const [todayRows, setTodayRows] = useState({});\n    const [QRValue, setQRValue] = useState(\"\");\n    const [inputText, setInputText] = useState(\"\");\n    const [searchQuery] = useDebounce(inputText, 50);\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedCodes, setSelectedCodes] = useState([]);\n\n    const printRef = useRef();\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    function findMostRecentSheetDate() {\n        let sheetDate = new Date();\n        let today = new Date();\n        let sheetDateString = null;\n        while (!sheetDateString) {\n            for (let option of dateFormatOptions) {\n                if (\n                    doc.sheetsByTitle[\n                        sheetDate.toLocaleDateString(\"en-US\", option)\n                    ]\n                ) {\n                    sheetDateString = sheetDate.toLocaleDateString(\n                        \"en-US\",\n                        option\n                    );\n                    break;\n                }\n            }\n            sheetDate.setDate(sheetDate.getDate() - 1);\n            if (dateDiffInDays(today, sheetDate) > 400) break;\n        }\n        return sheetDateString;\n    }\n\n    useEffect(function () {\n        async function initializeWorker() {\n            await doc.useServiceAccountAuth(config);\n            await doc.loadInfo(); // loads document properties and worksheets\n\n            // find today sheet\n\n            let sheetDate = findMostRecentSheetDate();\n\n            if (!doc.sheetsByTitle[sheetDate]) {\n                toast.error(`❗ Could not find data to use.`, {\n                    position: \"bottom-center\",\n                    autoClose: 300000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                let ts = doc.sheetsByTitle[sheetDate];\n                setTodaySheet(ts);\n                const rows = await ts.getRows();\n                setTodayRows(rows);\n\n                toast.success(`✅ Found ID data.`, {\n                    position: \"bottom-center\",\n                    autoClose: 3000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        }\n        initializeWorker();\n    }, []);\n\n    useEffect(\n        async function () {\n            if (searchQuery) {\n                let sr = await findStudents(searchQuery);\n                if (sr.length === 1) {\n                    setQRValue(sr[0]);\n                }\n                if (sr.length > 0) setSearchResults(sr);\n            } else {\n                setQRValue({});\n                setSearchResults([]);\n            }\n        },\n        [searchQuery]\n    );\n\n    async function findStudents(text) {\n        let results = [];\n\n        for (const row of todayRows) {\n            if (results.length > 4) break;\n            if (\n                (row[\"ID\"] + \"\").includes(text) ||\n                row[\"이름\"]?.includes(text)\n            ) {\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                let resultObject = {\n                    text: resultString,\n                    name: row[\"이름\"],\n                    id: row[\"ID\"],\n                };\n                results.push(resultObject);\n            }\n        }\n        return results;\n    }\n\n    async function addMarkedStudents() {\n        let results = [];\n\n        for (const row of todayRows) {\n            if (row[\"Print\"]?.toLowerCase() == \"x\") {\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                let resultObject = {\n                    text: resultString,\n                    name: row[\"이름\"],\n                    id: row[\"ID\"],\n                };\n                results.push(resultObject);\n            }\n        }\n        setSelectedCodes([...selectedCodes, ...results]);\n    }\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                backgroundColor: \"white\",\n            }}\n        >\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"row\",\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                }}\n            >\n                <img\n                    style={{ height: \"3rem\", marginRight: \"1rem\" }}\n                    src={Logo}\n                ></img>\n                <h1 style={{ textAlign: \"center\", margin: 0 }}>\n                    Print QR Codes\n                </h1>\n            </div>\n            <div\n                style={{\n                    marginTop: \"4rem\",\n                    marginBottom: \"4rem\",\n                    width: \"max(calc(100vw - 30rem), 80%)\",\n                    fontSize: \"1.5rem\",\n                }}\n            >\n                <input\n                    placeholder={\"Search for student or enter a number...\"}\n                    style={{\n                        width: \"100%\",\n                        fontSize: \"1.5rem\",\n                        border: \"2px solid lightgray\",\n                        borderRadius: \"1rem\",\n                        outline: \"none\",\n                        padding: \"1rem\",\n                        boxSizing: \"border-box\",\n                        textAlign: \"center\",\n                    }}\n                    value={inputText}\n                    onChange={(event) => {\n                        setInputText(event.target.value);\n                    }}\n                ></input>\n\n                {searchResults.map((result) => {\n                    return (\n                        <div\n                            onClick={function () {\n                                // setQRValue(result.id);\n                                // setInputText(result.name);\n                                // function () {\n                                setSelectedCodes([...selectedCodes, result]);\n                                // console.log(QRValue);\n                                // }\n                            }}\n                            style={{\n                                width: \"100%\",\n                                marginTop: \"0.5rem\",\n                                border: \"1px solid lightgray\",\n                                borderRadius: \"1rem\",\n                                padding: \"0.5rem\",\n                                boxSizing: \"border-box\",\n                                userSelect: \"none\",\n                                cursor: \"pointer\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <h4\n                                style={{\n                                    marginRight: \"2rem\",\n                                    marginTop: 0,\n                                    marginBottom: 0,\n                                }}\n                            >\n                                {result.text}\n                            </h4>\n                            {QRValue.id && (\n                                <QRCode size={50} value={QRValue.id} />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {/* {QRValue && QRValue.id && <QRCode value={QRValue.id} />}\n            <button\n                style={{\n                    marginTop: \"2rem\",\n                    marginBottom: \"2rem\",\n                    border: \"2px solid lightgray\",\n                    borderRadius: \"1rem\",\n                    padding: \"0.5rem\",\n                    width: \"10rem\",\n                }}\n                onClick={function () {\n                    setSelectedCodes([...selectedCodes, QRValue]);\n                    console.log(QRValue);\n                }}\n            >\n                Select\n            </button> */}\n\n            {/* {QRValue && (\n                <>\n                </>\n            )} */}\n\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>{QRValue.text}</h1> */}\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>To print: </h1> */}\n            {selectedCodes.length > 0 && (\n                <>\n                    <div\n                        style={{\n                            width: \"100%\",\n                            width: \"max(calc(100vw - 30rem), 80%)\",\n                            boxSizing: \"border-box\",\n                            padding: \"1rem\",\n                            display: \"grid\",\n                            gridTemplateColumns:\n                                \"repeat(auto-fill, minmax(150px, 1fr))\",\n                            gap: \"1rem\",\n                        }}\n                    >\n                        {selectedCodes.map((code) => (\n                            <div\n                                style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <QRCode size={100} value={code.id} />\n                                <p\n                                    style={{\n                                        marginTop: \"0.5rem\",\n                                        marginBottom: 0,\n                                    }}\n                                >\n                                    {code.text}\n                                </p>\n                                <button\n                                    style={{\n                                        marginTop: \"0.5rem\",\n                                        border: \"2px solid lightgray\",\n                                        borderRadius: \"1rem\",\n                                        padding: \"0.5rem\",\n                                        boxSizing: \"border-box\",\n                                        width: \"3rem\",\n                                    }}\n                                    onClick={function () {\n                                        setSelectedCodes(\n                                            selectedCodes.filter(\n                                                (c) => c.id != code.id\n                                            )\n                                        );\n                                    }}\n                                >\n                                    X\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                    <ToPrint ref={printRef}>\n                        <div\n                            style={{\n                                width: \"100%\",\n                                // width: \"max(calc(100vw - 30rem), 80%)\",\n                                boxSizing: \"border-box\",\n                                // padding: \"1rem\",\n                                // display: \"grid\",\n                                // gridTemplateColumns:\n                                //     \"repeat(auto-fill, minmax(150px, 1fr))\",\n                                // gap: \"3rem\",\n                                display: \"block\",\n                            }}\n                        >\n                            {selectedCodes.map((code) => (\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        alignItems: \"center\",\n                                        // float: \"left\",\n                                        display: \"inline-block\",\n                                        boxSizing: \"border-box\",\n                                        padding: \"1rem\",\n                                    }}\n                                >\n                                    <QRCode\n                                        style={{ margin: \"2rem\" }}\n                                        size={160}\n                                        value={code.id}\n                                    />\n                                    <p\n                                        style={{\n                                            marginTop: \"0.5rem\",\n                                            marginBottom: 0,\n                                            textAlign: \"center\",\n                                        }}\n                                    >\n                                        {code.text}\n                                    </p>\n                                </div>\n                            ))}\n                        </div>\n                    </ToPrint>\n                    <button\n                        style={{\n                            marginBottom: \"1rem\",\n                            marginTop: \"1rem\",\n                            border: \"2px solid lightgray\",\n                            borderRadius: \"1rem\",\n                            padding: \"0.5rem\",\n                            boxSizing: \"border-box\",\n                            width: \"min(30rem, 80%)\",\n                        }}\n                        onClick={handlePrint}\n                    >\n                        Print codes.\n                    </button>\n                </>\n            )}\n            <button\n                style={{\n                    marginBottom: \"1rem\",\n                    marginTop: \"1rem\",\n                    border: \"2px solid lightgray\",\n                    borderRadius: \"1rem\",\n                    padding: \"0.5rem\",\n                    boxSizing: \"border-box\",\n                    width: \"min(30rem, 80%)\",\n                }}\n                onClick={addMarkedStudents}\n            >\n                Print codes for marked students.\n            </button>\n            {/* <h1\n                style={{\n                    textAlign: \"center\",\n                    margin: 0,\n                    color: \"lightgray\",\n                    fontSize: \"1rem\",\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                }}\n            >\n                v 1.1\n            </h1> */}\n        </div>\n    );\n}\n\nexport default Print;\n","export const spreadsheetID = \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\";\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Scan from \"./pages/Scan\";\nimport Print from \"./pages/Print\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Zoom } from \"react-toastify\";\nimport { HashRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Routes>\n                    <Route path=\"/\" element={<Print />} />\n                    <Route path=\"/\" element={<Scan />} />\n                </Routes>\n\n                <ToastContainer\n                    position=\"bottom-center\"\n                    autoClose={3000}\n                    hideProgressBar={false}\n                    newestOnTop\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss\n                    draggable\n                    pauseOnHover\n                    pauseOnFocusLoss={false}\n                    transition={Zoom}\n                    icon={false}\n                />\n\n                <h1\n                    style={{\n                        textAlign: \"center\",\n                        margin: 0,\n                        color: \"lightgray\",\n                        fontSize: \"1rem\",\n                        marginTop: \"1rem\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    v 1.7\n                </h1>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Reader.js","Util.js","images/Logo.png","pages/Scan.js","components/ToPrint.js","pages/Print.js","Doc.js","api/spreadsheetID.js","App.js","reportWebVitals.js","index.js"],"names":["delayCount","Reader","props","video","useRef","canvasRef","useState","result","setResult","black","setBlack","tick","periodic","setTimeout","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","useEffect","onScan","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","style","filter","ref","hidden","sleep","Promise","resolve","Math","ceil","String","prototype","format","formatted","this","i","arguments","length","regexp","RegExp","replace","toastProp","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","scanList","scanHistory","recentList","shutter","recentCount","addToRecentList","value","push","shift","Scan","toLocaleDateString","todayDate","setTodayDate","currentTimeSec","setCurrentTimeSec","getCurrentTime","toLocaleTimeString","hour12","hour","minute","getTime","id","parseInt","Recent","header","map","entry","checkDuplicate","toast","dismiss","prop","initNoti","info","text","loading","doc","isOpen","tD","sheetsByDate","type","TYPE","WARNING","warning","reloadPage","ERROR","error","noSheet","tS","sheet","date","title","SUCCESS","render","loaded","update","initialize","checkId","currentTime","getStudent","noStudent","idx","action","checkIn","valueType","success","name","checkOut","warn","alreadyDone","updateCell","interval","timeSec","second","useBeforeunload","src","Logo","alt","ret","ToPrint","React","forwardRef","className","children","selectedIds","Set","Print","sheetKey","inputText","setInputText","studentList","setStudentList","printList","setPrintList","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","printRef","handlePrint","useReactToPrint","content","results","toLowerCase","resultString","resultObject","toString","add","findMostRecentSheet","sheetInfo","failedToOpen","idList","nameIdx","readList","nameList","list","min","printIdx","print","succeededToOpen","findStudents","row","includes","sr","query","placeholder","onChange","event","target","onClick","has","size","c","delete","spreadsheetID","production","development","GoogleSpreadsheet","require","ASCII_A","dateFormatOptions","year","month","day","dateDiffInDays","a","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","abs","floor","findHeader","headers","Doc","state","initialized","useServiceAccountAuth","config","loadInfo","arg","sheetsByTitle","dateStr","option","loadCells","createHeader","idIdx","classIdx","checkInIdx","checkOutIdx","columnCount","getCell","class","rowIdx","ROW_RANGE","ids","lastIdx","rowSize","rowCount","increment","fromCharCode","nullCount","slice","todaySheet","studentNumber","studentRowNumber","findStudentRow","saveUpdatedCells","ID","sheetDate","today","setDate","App","openDoc","to","path","element","newestOnTop","rtl","pauseOnFocusLoss","transition","Zoom","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.803f68ec.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport jsQR from \"jsqr\";\r\nimport \"../App.css\";\r\n\r\nconst PAUSE_COUNT = 5;\r\nlet delayCount = 0;\r\nfunction Reader(props) {\r\n    const video = useRef();\r\n    const canvasRef = useRef();\r\n    const [result, setResult] = useState();\r\n    const [black, setBlack] = useState(false);\r\n\r\n    function shutter() {\r\n        setBlack(true);\r\n        setTimeout(() => {\r\n            setBlack(false);\r\n        }, 300);\r\n    }\r\n\r\n    useEffect(\r\n        function () {\r\n            if (result) {\r\n                props.onScan(result.data);\r\n                setResult(null);\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [result]\r\n    );\r\n\r\n    useEffect(function () {\r\n        const inter = setInterval(() => {\r\n            requestAnimationFrame(tick);\r\n        }, 200);\r\n        return () => {\r\n            clearInterval(inter);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(\r\n        function () {\r\n            navigator.mediaDevices\r\n                .getUserMedia({ video: { facingMode: \"environment\" } })\r\n                .then(function (stream) {\r\n                    console.log(stream);\r\n                    try {\r\n                        video.current.srcObject = stream;\r\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\r\n                        video.current.play();\r\n                    } catch {}\r\n                });\r\n        },\r\n        [video, canvasRef]\r\n    );\r\n\r\n    function tick() {\r\n        if (props.periodic()) shutter();\r\n        if (--delayCount > 0) return;\r\n        if (video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\r\n            canvasRef.current.height = video.current.videoHeight;\r\n            canvasRef.current.width = video.current.videoWidth;\r\n\r\n            var canvas = canvasRef.current.getContext(\"2d\");\r\n\r\n            canvas.drawImage(\r\n                video.current,\r\n                0,\r\n                0,\r\n                canvasRef.current.width,\r\n                canvasRef.current.height\r\n            );\r\n            var imageData = canvas.getImageData(\r\n                0,\r\n                0,\r\n                canvasRef.current.width,\r\n                canvasRef.current.height\r\n            );\r\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\r\n                inversionAttempts: \"dontInvert\",\r\n            });\r\n            if (code) {\r\n                console.log(code.data);\r\n                setResult({ data: code.data, time: new Date() });\r\n                delayCount = PAUSE_COUNT;\r\n            } \r\n            return;\r\n        } \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video\r\n                style={{\r\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\r\n                }}\r\n                ref={video}\r\n            ></video>\r\n            <canvas ref={canvasRef} hidden></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reader;\r\n","export const sleep = (time) => {\n   return new Promise((resolve) => setTimeout(resolve, Math.ceil(time * 1000)));\n};\n\ninterface String\n{\n    format: () => String;\n}\n\n// eslint-disable-next-line no-extend-native\nString.prototype.format = function() {\n    let formatted = this;\n    for (let i = 0; i < arguments.length; i++) {\n        let regexp = new RegExp('\\\\{'+i+'\\\\}', 'gi');\n        formatted = formatted.replace(regexp, arguments[i]);\n    }\n    return formatted;\n}\n\nexport const toastProp = {\n    position: \"top-center\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined\n}\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Reader from \"../components/Reader\";\r\nimport { sleep, toastProp } from \"../Util\";\r\n\r\nimport \"./Scan.css\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport text from \"../api/text\";\r\n\r\nimport { useBeforeunload } from 'react-beforeunload';\r\n\r\nconst SCAN_INTERVAL = 1000;\r\nconst CHECK_INTERVAL = 5000;\r\nconst scanList = [];\r\nconst scanHistory = [];\r\nconst recentList = [];\r\nlet shutter = false;\r\n\r\nlet recentCount = 0;\r\nfunction addToRecentList(value) {\r\n    recentList.push([recentCount, ...value]);\r\n    if (recentList.length > 5) recentList.shift();\r\n    recentCount += 1;\r\n}\r\n\r\n\r\nfunction Scan(props) {\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\r\n\r\n    useEffect(function() {\r\n        console.log(\"Update today data \" + todayDate);\r\n    }, [todayDate]);\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            toast.dismiss();\r\n            console.log(\"Wait for sheet\");\r\n            const prop = toastProp;\r\n            prop[\"autoClose\"] = false;\r\n            const initNoti = toast.info(text.loading, toastProp);\r\n            while (!props.doc.isOpen()) {\r\n                console.log(\"check\");\r\n                await sleep(1.0);\r\n            }\r\n            console.log(\"done\");\r\n            let tD = new Date();\r\n            const result = await props.doc.sheetsByDate(tD);\r\n            if (!result)\r\n            {\r\n                toast.dismiss(initNoti);\r\n                prop.autoClose = 3000;\r\n                prop.type = toast.TYPE.WARNING;\r\n                toast.warning(\r\n                    text.reloadPage, toastProp);\r\n                prop.type = toast.TYPE.ERROR;\r\n                toast.error(text.noSheet, toastProp);\r\n                return;\r\n            }\r\n            const tS = result.sheet;\r\n            const date = result.date;\r\n            console.log(\"tS\");\r\n            console.log(tS.title);\r\n            setTodayDate(date);\r\n\r\n            prop.type = toast.TYPE.SUCCESS;\r\n            prop.autoClose = 3000;\r\n            prop.render = text.loaded;\r\n            toast.update(initNoti, prop);\r\n        }\r\n        initialize();\r\n\r\n    }, [props]);\r\n\r\n    function getCurrentTime() {\r\n        return new Date().toLocaleTimeString(\"en-US\", {\r\n            hour12: true,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n\r\n    async function handleScan(data) {\r\n        const tick = new Date().getTime();\r\n        console.log(\"reached function \" + tick + \" \" + data);\r\n        const id = parseInt(data);\r\n        if (id > 0) scanList.push({tick:tick, id:id});\r\n\r\n        return;\r\n    }\r\n\r\n    function checkShutter() {\r\n        const ret = shutter;\r\n        shutter = false;\r\n        return ret;\r\n    }\r\n\r\n    function Recent() {\r\n        const header = (<tr><th>Name</th><th>action</th><th>time</th></tr>);\r\n        return (<table><tbody>{header}\r\n            {recentList.map(entry => (\r\n                <tr key={entry[0]}>\r\n                    <td key=\"name\">{entry[1]}</td>\r\n                    <td key=\"action\">{entry[2]}</td>\r\n                    <td key=\"time\">{entry[3]}</td>\r\n                </tr>\r\n               ))\r\n            }\r\n        </tbody></table>)\r\n    }\r\n\r\n    function checkDuplicate(id) {\r\n        for (let h of scanHistory)\r\n        {\r\n            if (h.id === id) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Set QR code scan updater\r\n    useEffect(() => {\r\n        async function checkId(id)\r\n        {\r\n            console.log(\"handling scanning \" + id);\r\n\r\n            // Locate student in the spreadsheet today\r\n            const currentTime = getCurrentTime();\r\n\r\n            const info = await props.doc.getStudent(id);\r\n            if (!info)\r\n            {\r\n                // Student does not exist\r\n                toast.error(text.noStudent, toastProp);\r\n                return;\r\n            }\r\n            console.log(\"Student ID: \" + id + \" Idx:  \" + info.idx);\r\n            // Determine action to take\r\n            let action = null;\r\n            if (info.checkIn.valueType == null) {\r\n                // Check student in\r\n                info.checkIn.value = currentTime;\r\n                action = \"Check In\";\r\n\r\n                toast.success(text.checkIn.format(info.name.value, currentTime), toastProp);\r\n            } else if (info.checkOut.valueType == null) {\r\n                // Check student out\r\n                info.checkOut.value = currentTime;\r\n                action = \"Check Out\";\r\n\r\n                toast.success(text.checkOut.format(info.name.value, currentTime), toastProp);\r\n            } else {\r\n                // Student check in and out are both filled\r\n                toast.warn(\r\n                    text.alreadyDone.format(info.name.value), toastProp);\r\n                return;\r\n            }\r\n            console.log(action + \" \" + currentTime);\r\n            addToRecentList([info.name.value, action, currentTime]);\r\n            await props.doc.updateCell();\r\n            shutter = true;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const tick = new Date().getTime();\r\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\r\n                hour12: true,\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\"\r\n            });\r\n            setCurrentTimeSec(timeSec);\r\n            while (scanHistory.length > 0 && tick - scanHistory[0].tick > CHECK_INTERVAL)\r\n            {\r\n                scanHistory.shift();\r\n            }\r\n            while (scanList.length > 0)\r\n            {\r\n                let entry = scanList.shift();\r\n\r\n                if (tick - entry.tick > SCAN_INTERVAL || checkDuplicate(entry.id)) continue;\r\n                scanHistory.push(entry);\r\n                await checkId(entry.id);\r\n                break;\r\n            }\r\n            return () => clearInterval(interval);\r\n        }, 200)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useBeforeunload( () => { console.log(\"Close\");});\r\n    return (\r\n        <div id=\"scan\">\r\n            <div id=\"title\" >\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\"/>\r\n                <h1> SVKS Check In/Out </h1>\r\n            </div>\r\n            <div id=\"clock\">\r\n            {todayDate} {currentTimeSec}\r\n            </div>\r\n            <div id=\"contents\">\r\n                <div id=\"reader\">\r\n                    <Reader\r\n                        onScan={handleScan}\r\n                        periodic={checkShutter}/>\r\n                </div>\r\n                <div id=\"recent\">\r\n                    <h2>\r\n                        Recent Check In/Out\r\n                    </h2>\r\n                    <Recent />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scan;\r\n","import React from \"react\";\r\nexport const ToPrint = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div\r\n            className=\"toPrint\"\r\n            ref={ref}\r\n            style={{\r\n                width: \"max(calc(100vw - 30rem), 80%)\",\r\n                // position: \"absolute\",\r\n                // // top: \"-100%\",\r\n                // zIndex: \"-100\",\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ToPrint;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Scan.css\"\r\nimport QRCode from \"react-qr-code\";\r\nimport { toast } from \"react-toastify\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { ToPrint } from \"../components/ToPrint\";\r\nimport { sleep, toastProp } from \"../Util\";\r\nimport text from \"../api/text\";\r\n\r\nconst selectedIds = new Set();\r\n\r\nfunction Print(props) {\r\n    const [inputText, setInputText] = useState(\"\");\r\n    const [studentList, setStudentList] = useState([]);\r\n    const [printList, setPrintList] = useState([]);\r\n    const [searchQuery] = useDebounce(inputText, 50);\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedCodes, setSelectedCodes] = useState([]);\r\n\r\n    const printRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            toast.dismiss();\r\n            console.log(\"Wait for sheet\");\r\n            const prop = toastProp;\r\n            prop.autoClose = false;\r\n            console.log(prop);\r\n            const initNoti = toast.info(text.loading, prop);\r\n            while (!props.doc.isOpen()) {\r\n                console.log(\"check\");\r\n                await sleep(1.0);\r\n            }\r\n\r\n            let sheetInfo = await props.doc.findMostRecentSheet();\r\n\r\n            if (!sheetInfo)\r\n            {\r\n                toast.dismiss(initNoti);\r\n                prop.autoClose = 3000;\r\n                toast.error(text.failedToOpen, toastProp);\r\n                return;\r\n            }\r\n            console.log(sheetInfo.date);\r\n            const idList = sheetInfo.idList\r\n            const nameIdx = sheetInfo.header.name;\r\n            const nameList = await props.doc.readList(nameIdx);\r\n            const list = [];\r\n            for (let i = 0 ; i < Math.min(idList.length, nameList.length); i++)\r\n            {\r\n               list.push({id: idList[i],  name: nameList[i]});\r\n            }\r\n            setStudentList(list);\r\n\r\n            const printIdx = sheetInfo.header.print;\r\n            if (printIdx)\r\n            {\r\n                setPrintList(await props.doc.readList(printIdx));\r\n            }\r\n            else\r\n            {\r\n                setPrintList([]);\r\n            }\r\n            console.log(\"Sheet read \" + list.length);\r\n            prop.type = toast.TYPE.SUCCESS;\r\n            prop.autoClose = 3000;\r\n            prop.render = text.succeededToOpen;\r\n            toast.update(initNoti, prop);\r\n        }\r\n        initialize();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(\r\n        () => {\r\n            async function findStudents(text) {\r\n                let results = [];\r\n\r\n                for (const row of studentList) {\r\n                    if (results.length > 4) break;\r\n                    if ((row.id && row.id.toString().includes(text)) ||\r\n                        (row.name && row.name.toString().includes(text)))\r\n                    {\r\n                        let resultString = `${row.name}:  ${row.id}`;\r\n                        let resultObject = {\r\n                            text: resultString,\r\n                            name: row.name,\r\n                            id: row.id.toString(),\r\n                        };\r\n                        results.push(resultObject);\r\n                        selectedIds.add(row.id);\r\n                    }\r\n                }\r\n                return results;\r\n            }\r\n            async function query() {\r\n                if (searchQuery) {\r\n                    let sr = await findStudents(searchQuery);\r\n                    if (sr.length > 0) setSearchResults(sr);\r\n                } else {\r\n                    setSearchResults([]);\r\n                }\r\n            }\r\n            query();\r\n        },\r\n        [searchQuery, studentList]\r\n    );\r\n\r\n    async function addMarkedStudents() {\r\n        let results = [];\r\n\r\n        for (let i = 0 ; i < printList.length ; i++)\r\n        {\r\n            if (printList[i] && printList[i].toLowerCase() === \"x\" && studentList[i].id != null)\r\n            {\r\n                const entry = studentList[i];\r\n                let resultString = `${entry.name}:  ${entry.id}`;\r\n                let resultObject = {\r\n                    text: resultString,\r\n                    name: entry.name,\r\n                    id: entry.id.toString()\r\n                };\r\n                results.push(resultObject);\r\n                selectedIds.add(entry.id);\r\n            }\r\n        }\r\n        setSelectedCodes([...selectedCodes, ...results]);\r\n    }\r\n\r\n    return (\r\n        <div id=\"print\">\r\n            <div id=\"title\">\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\" ></img>\r\n                <h1> Print QR Codes </h1>\r\n            </div>\r\n            <div id=\"printContents\" >\r\n                <input id=\"search\"\r\n                    placeholder={\"Search for student or enter a number...\"}\r\n                    value={inputText}\r\n                    onChange={(event) => {\r\n                        setInputText(event.target.value);\r\n                    }} />\r\n\r\n                {searchResults.map((result) => {\r\n                    return (\r\n                        <div key={result.id} id=\"searchResult\"\r\n                            onClick={function () {\r\n                                if (!selectedIds.has(result.id)) {\r\n                                    setSelectedCodes([...selectedCodes, result]);\r\n                                    selectedIds.add(result.id);\r\n                                }\r\n                            }}>\r\n                            <h4> {result.text} </h4>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            {selectedCodes.length > 0 && (\r\n                <>\r\n                    <div id=\"selected\">\r\n                        {selectedCodes.map((code) => (\r\n                            <div key={code.id} id=\"selectedItem\">\r\n                                <QRCode size={100} value={code.id} />\r\n                                <p id=\"qrName\"> {code.text} </p>\r\n                                <button id=\"deleteButton\"\r\n                                    onClick={function () {\r\n                                        setSelectedCodes(\r\n                                            selectedCodes.filter(\r\n                                                (c) => parseInt(c.id) !== parseInt(code.id)\r\n                                            )\r\n                                        );\r\n                                        selectedIds.delete(code.id);\r\n                                    }}\r\n                                > X </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <ToPrint ref={printRef}>\r\n                        <div id=\"qrList\">\r\n                            {selectedCodes.map((code) => (\r\n                                <div key={code.id} id=\"qrCode\" >\r\n                                    <QRCode size={160} value={code.id} />\r\n                                    <p id=\"qrName\" >\r\n                                        {code.text}\r\n                                    </p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </ToPrint>\r\n                    <button id=\"printButton\" onClick={handlePrint}>\r\n                        Print codes.\r\n                    </button>\r\n                </>\r\n            )}\r\n            <button id=\"printButton\" onClick={addMarkedStudents}>\r\n                Print codes for marked students.\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Print;\r\n","import { spreadsheetID } from \"./api/spreadsheetID\";\r\nimport config from \"./api/config\";\r\nimport header from \"./api/header\";\r\n\r\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nconst MAX_COLUMN = 26;\r\nconst ASCII_A = 65;\r\n\r\nlet sheetKey;\r\nif (process.env.NODE_ENV === \"development\")\r\n{\r\n    console.log(\"Development mode\");\r\n    sheetKey = \"development\";\r\n}\r\nelse\r\n{\r\n    console.log(\"Production mode\");\r\n    sheetKey = \"production\";\r\n}\r\n\r\nconst dateFormatOptions = [\r\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\r\n];\r\n\r\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\nfunction dateDiffInDays(a, b) {\r\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\r\n    // Discard the time and time-zone information.\r\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\r\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\r\n\r\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\r\n}\r\n\r\n\r\nfunction findHeader(value, headers)\r\n{\r\n    for (let h of headers)\r\n        if (h === value) return true ;\r\n\r\n    return false;\r\n}\r\n\r\nclass Doc {\r\n    constructor() {\r\n        console.log(\"Create Doc class\");\r\n        const doc = new GoogleSpreadsheet(spreadsheetID[sheetKey]);\r\n        this.state = {doc: doc, initialized: false, sheet: null, header: null, idList: null};\r\n    }\r\n\r\n    async openDoc() {\r\n        console.log('try to read sheet');\r\n        await this.state.doc.useServiceAccountAuth(config);\r\n        console.log('Auth Done');\r\n        await this.state.doc.loadInfo(); // loads document properties and worksheets\r\n        console.log('Done');\r\n        this.state.initialized = true;\r\n    }\r\n\r\n    isOpen() {\r\n        return this.state.initialized;\r\n    }\r\n\r\n    async sheetsByTitle(arg) {\r\n        this.state.sheet = await this.state.doc.sheetsByTitle[arg];\r\n\r\n        return this.state.sheet;\r\n    }\r\n\r\n    async sheetsByDate(date) {\r\n        this.state.sheet = null;\r\n        let dateStr = null;\r\n        for (let option of dateFormatOptions) {\r\n            this.state.sheet = await this.state.doc.sheetsByTitle[date.toLocaleDateString(\"en-US\", option)];\r\n            dateStr = date.toLocaleDateString(\"en-US\", option);\r\n            if (this.state.sheet) {\r\n                break;\r\n            }\r\n        }\r\n        if (!this.state.sheet)\r\n            return null;\r\n\r\n        console.log(dateStr);\r\n        console.log(\"Found sheet \" + this.state.sheet);\r\n\r\n        // Find spreadsheet headers\r\n        await this.state.sheet.loadCells('A1:Z1');\r\n        const header = this.createHeader(this.state.sheet);\r\n        console.log(header);\r\n        const idList = await this.readList(header.id, this.state.sheet);\r\n\r\n        this.state.header = header;\r\n        this.state.idList = idList;\r\n\r\n        return {sheet: this.state.sheet, date: dateStr, header: header, idList: idList};\r\n    }\r\n\r\n    createHeader(tS = this.state.sheet)\r\n    {\r\n        let idIdx = null;\r\n        let nameIdx = null;\r\n        let classIdx = null;\r\n        let checkInIdx = null;\r\n        let checkOutIdx = null;\r\n        let printIdx = null;\r\n        if (!tS)\r\n            return {};\r\n        for (let i = 0 ; i < Math.min(MAX_COLUMN, tS.columnCount) ; i++)\r\n        {\r\n            const entry = tS.getCell(0, i);\r\n            if (entry.valueType == null) continue;\r\n            nameIdx = (findHeader(entry.value, header.name)) ? i : nameIdx;\r\n            idIdx = (findHeader(entry.value, header.id)) ? i : idIdx;\r\n            classIdx = (findHeader(entry.value, header.class)) ? i : classIdx;\r\n            checkInIdx = (findHeader(entry.value, header.checkIn)) ? i : checkInIdx;\r\n            checkOutIdx = (findHeader(entry.value, header.checkOut)) ? i : checkOutIdx;\r\n            printIdx = (findHeader(entry.value, header.print)) ? i : printIdx;\r\n        }\r\n        return {id:idIdx, name:nameIdx, class:classIdx, checkIn:checkInIdx, checkOut:checkOutIdx, print:printIdx};\r\n    }\r\n\r\n    async readList(idIdx, tS = this.state.sheet)\r\n    {\r\n        let rowIdx = 0;\r\n        const ROW_RANGE = 100;\r\n        let ids = [];\r\n        if (!tS)\r\n            return [];\r\n        let lastIdx = null;\r\n        const rowSize = tS.rowCount;\r\n        while (rowIdx < rowSize-1)\r\n        {\r\n            // Read ROW_RANGE cell\r\n            const increment = Math.min(rowSize - rowIdx, ROW_RANGE);\r\n            const query = String.fromCharCode(ASCII_A+idIdx) + (rowIdx+1) + \":\" +\r\n                          String.fromCharCode(ASCII_A+idIdx) + (rowIdx+increment);\r\n            await tS.loadCells(query);\r\n            console.log(query);\r\n\r\n            let nullCount = 0;\r\n            for (let i = 0 ; i < ROW_RANGE ; i++)\r\n            {\r\n                const entry = tS.getCell(rowIdx + i, idIdx);\r\n                let id = null;\r\n                if (entry.valueType == null)\r\n                {\r\n                    nullCount++;\r\n                }\r\n                else\r\n                {\r\n                    id = entry.value;\r\n                    lastIdx = rowIdx + i;\r\n                }\r\n                ids.push(id);\r\n            }\r\n            // If all ROW_RANGE cells are empty, stop reading\r\n            if (nullCount === ROW_RANGE) break;\r\n            rowIdx += increment;\r\n        }\r\n        ids[0] = \"\";\r\n        ids = ids.slice(0, lastIdx+1);\r\n\r\n        return ids;\r\n    }\r\n\r\n    async getStudent(id) {\r\n        const todaySheet = this.state.sheet;\r\n        if (!todaySheet)\r\n            return null;\r\n\r\n        // Locate student in the spreadsheet today\r\n        let studentNumber = id;\r\n        let studentRowNumber = this.findStudentRow(studentNumber);\r\n\r\n        if (!studentRowNumber) {\r\n            return null;\r\n        }\r\n\r\n        const header = this.state.header;\r\n        // Student ID is found\r\n        console.log(\"Student ID: \" + studentNumber + \" Index:\" + studentRowNumber);\r\n        const query = String.fromCharCode(ASCII_A) + (studentRowNumber) + \":\" +\r\n                      String.fromCharCode(ASCII_A+MAX_COLUMN-1) + (studentRowNumber);\r\n        console.log(query);\r\n        await todaySheet.loadCells(query);\r\n        const idx = studentRowNumber - 1;\r\n        console.log(\"Get Cell \" + idx + \" \" + header.name);\r\n        const name = todaySheet.getCell(idx, header.name);\r\n        const checkIn = todaySheet.getCell(idx, header.checkIn);\r\n        const checkOut = todaySheet.getCell(idx, header.checkOut);\r\n\r\n        return {idx: idx, name: name, checkIn: checkIn, checkOut: checkOut};\r\n    }\r\n\r\n    async updateCell()\r\n    {\r\n        const todaySheet = this.state.sheet;\r\n        if (!todaySheet)\r\n            return null;\r\n        await todaySheet.saveUpdatedCells();\r\n    }\r\n\r\n    findStudentRow(ID) {\r\n        const idList = this.state.idList;\r\n        console.log(\"finding student row \" + idList.length);\r\n        for (let i = 0 ; i < idList.length ; i++)\r\n        {\r\n            if (idList[i] && idList[i] === ID) return i + 1;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async findMostRecentSheet() {\r\n        let sheetDate = new Date();\r\n        let today = new Date();\r\n        while (dateDiffInDays(today, sheetDate) < 400)\r\n        {\r\n            const sheet = await this.sheetsByDate(sheetDate);\r\n            if (sheet)\r\n                return sheet;\r\n            sheetDate.setDate(sheetDate.getDate() - 1);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Doc;\r\n\r\n","export const spreadsheetID = {production: \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\",\r\n                              development: \"12AWolV6lI99LM6NNP1bUwYanAuNDSWRJI8X4-ozM98Q\"};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Scan from \"./pages/Scan\";\r\nimport Print from \"./pages/Print\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Zoom } from \"react-toastify\";\r\nimport { HashRouter as Router, Routes, Route, Link} from \"react-router-dom\";\r\nimport Doc from \"./Doc\";\r\n\r\nconst doc = new Doc();\r\nfunction App() {\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            console.log(\"Initialize app\");\r\n            doc.openDoc();\r\n        }\r\n        initialize();\r\n    }, []);\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <nav id=\"nav\">\r\n                    <tr id=\"nav\">\r\n                        <td id=\"nav_item\">\r\n                            <Link to=\"/\">Scan</Link>\r\n                        </td>\r\n                        <td id=\"nav_item\">\r\n                            <Link to=\"/print\">Print</Link>\r\n                        </td>\r\n                    </tr>\r\n                </nav>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className=\"App\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Scan doc={doc} />} />\r\n                    <Route path=\"print\" element={<Print doc={doc}/>} />\r\n                </Routes>\r\n\r\n                <ToastContainer\r\n                    position=\"bottom-center\"\r\n                    autoClose={3000}\r\n                    hideProgressBar={false}\r\n                    newestOnTop\r\n                    closeOnClick\r\n                    rtl={false}\r\n                    draggable\r\n                    pauseOnHover\r\n                    pauseOnFocusLoss={false}\r\n                    transition={Zoom}\r\n                    icon={false}\r\n                />\r\n                <h2>\r\n                    v 1.8.1\r\n                </h2>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","images/Logo.png","components/ToPrint.js","pages/Print.js","api/spreadsheetID.js","App.js","reportWebVitals.js","index.js"],"names":["ToPrint","React","forwardRef","props","ref","className","style","width","children","doc","GoogleSpreadsheet","require","dateDiffInDays","a","b","utc1","Date","UTC","getFullYear","getMonth","getDate","utc2","Math","abs","floor","dateFormatOptions","year","month","day","Print","useState","setTodaySheet","todayRows","setTodayRows","QRValue","setQRValue","inputText","setInputText","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","printRef","useRef","handlePrint","useReactToPrint","content","current","findMostRecentSheetDate","sheetDate","today","sheetDateString","option","sheetsByTitle","toLocaleDateString","setDate","findStudents","text","results","row","length","includes","resultString","resultObject","name","id","push","toLowerCase","useEffect","useServiceAccountAuth","config","loadInfo","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ts","getRows","rows","success","initializeWorker","sr","display","alignItems","flexDirection","backgroundColor","justifyContent","marginTop","marginBottom","height","marginRight","src","Logo","textAlign","margin","fontSize","placeholder","border","borderRadius","outline","padding","boxSizing","value","onChange","event","target","map","result","onClick","userSelect","cursor","size","code","filter","c","App","path","element","newestOnTop","rtl","pauseOnFocusLoss","Zoom","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86fb6567.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React from \"react\";\nexport const ToPrint = React.forwardRef((props, ref) => {\n    return (\n        <div\n            className=\"toPrint\"\n            ref={ref}\n            style={{\n                width: \"100%\",\n                width: \"max(calc(100vw - 30rem), 80%)\",\n                // position: \"absolute\",\n                // // top: \"-100%\",\n                // zIndex: \"-100\",\n            }}\n        >\n            {props.children}\n        </div>\n    );\n});\n\nexport default ToPrint;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport { toast } from \"react-toastify\";\nimport config from \"../api/config\";\nimport { spreadsheetID } from \"../api/spreadsheetID\";\nimport Logo from \"../images/Logo.png\";\nimport { useDebounce } from \"use-debounce\";\nimport { useReactToPrint } from \"react-to-print\";\nimport { ToPrint } from \"../components/ToPrint\";\n\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\nconst doc = new GoogleSpreadsheet(spreadsheetID);\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\nfunction dateDiffInDays(a, b) {\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\n    // Discard the time and time-zone information.\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\n}\n\nconst dateFormatOptions = [\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\n];\n\nfunction Print(props) {\n    const [todaySheet, setTodaySheet] = useState({});\n    const [todayRows, setTodayRows] = useState({});\n    const [QRValue, setQRValue] = useState(\"\");\n    const [inputText, setInputText] = useState(\"\");\n    const [searchQuery] = useDebounce(inputText, 50);\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedCodes, setSelectedCodes] = useState([]);\n\n    const printRef = useRef();\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    function findMostRecentSheetDate() {\n        let sheetDate = new Date();\n        let today = new Date();\n        let sheetDateString = null;\n        while (!sheetDateString) {\n            for (let option of dateFormatOptions) {\n                if (\n                    doc.sheetsByTitle[\n                        sheetDate.toLocaleDateString(\"en-US\", option)\n                    ]\n                ) {\n                    sheetDateString = sheetDate.toLocaleDateString(\n                        \"en-US\",\n                        option\n                    );\n                    break;\n                }\n            }\n            sheetDate.setDate(sheetDate.getDate() - 1);\n            if (dateDiffInDays(today, sheetDate) > 400) break;\n        }\n        return sheetDateString;\n    }\n\n    useEffect(function () {\n        async function initializeWorker() {\n            await doc.useServiceAccountAuth(config);\n            await doc.loadInfo(); // loads document properties and worksheets\n\n            // find today sheet\n\n            let sheetDate = findMostRecentSheetDate();\n\n            if (!doc.sheetsByTitle[sheetDate]) {\n                toast.error(`❗ Could not find data to use.`, {\n                    position: \"bottom-center\",\n                    autoClose: 300000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                let ts = doc.sheetsByTitle[sheetDate];\n                setTodaySheet(ts);\n                const rows = await ts.getRows();\n                setTodayRows(rows);\n\n                toast.success(`✅ Found ID data.`, {\n                    position: \"bottom-center\",\n                    autoClose: 3000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        }\n        initializeWorker();\n    }, []);\n\n    useEffect(\n        async function () {\n            if (searchQuery) {\n                let sr = await findStudents(searchQuery);\n                if (sr.length === 1) {\n                    setQRValue(sr[0]);\n                }\n                if (sr.length > 0) setSearchResults(sr);\n            } else {\n                setQRValue({});\n                setSearchResults([]);\n            }\n        },\n        [searchQuery]\n    );\n\n    async function findStudents(text) {\n        let results = [];\n\n        for (const row of todayRows) {\n            if (results.length > 4) break;\n            if (\n                (row[\"ID\"] + \"\").includes(text) ||\n                row[\"이름\"]?.includes(text)\n            ) {\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                let resultObject = {\n                    text: resultString,\n                    name: row[\"이름\"],\n                    id: row[\"ID\"],\n                };\n                results.push(resultObject);\n            }\n        }\n        return results;\n    }\n\n    async function addMarkedStudents() {\n        let results = [];\n\n        for (const row of todayRows) {\n            if (row[\"Print\"]?.toLowerCase() == \"x\") {\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                let resultObject = {\n                    text: resultString,\n                    name: row[\"이름\"],\n                    id: row[\"ID\"],\n                };\n                results.push(resultObject);\n            }\n        }\n        setSelectedCodes([...selectedCodes, ...results]);\n    }\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                backgroundColor: \"white\",\n            }}\n        >\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"row\",\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                }}\n            >\n                <img\n                    style={{ height: \"3rem\", marginRight: \"1rem\" }}\n                    src={Logo}\n                ></img>\n                <h1 style={{ textAlign: \"center\", margin: 0 }}>\n                    Print QR Codes\n                </h1>\n            </div>\n            <div\n                style={{\n                    marginTop: \"4rem\",\n                    marginBottom: \"4rem\",\n                    width: \"max(calc(100vw - 30rem), 80%)\",\n                    fontSize: \"1.5rem\",\n                }}\n            >\n                <input\n                    placeholder={\"Search for student or enter a number...\"}\n                    style={{\n                        width: \"100%\",\n                        fontSize: \"1.5rem\",\n                        border: \"2px solid lightgray\",\n                        borderRadius: \"1rem\",\n                        outline: \"none\",\n                        padding: \"1rem\",\n                        boxSizing: \"border-box\",\n                        textAlign: \"center\",\n                    }}\n                    value={inputText}\n                    onChange={(event) => {\n                        setInputText(event.target.value);\n                    }}\n                ></input>\n\n                {searchResults.map((result) => {\n                    return (\n                        <div\n                            onClick={function () {\n                                // setQRValue(result.id);\n                                // setInputText(result.name);\n                                // function () {\n                                setSelectedCodes([...selectedCodes, result]);\n                                // console.log(QRValue);\n                                // }\n                            }}\n                            style={{\n                                width: \"100%\",\n                                marginTop: \"0.5rem\",\n                                border: \"1px solid lightgray\",\n                                borderRadius: \"1rem\",\n                                padding: \"0.5rem\",\n                                boxSizing: \"border-box\",\n                                userSelect: \"none\",\n                                cursor: \"pointer\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <h4\n                                style={{\n                                    marginRight: \"2rem\",\n                                    marginTop: 0,\n                                    marginBottom: 0,\n                                }}\n                            >\n                                {result.text}\n                            </h4>\n                            {QRValue.id && (\n                                <QRCode size={50} value={QRValue.id} />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {/* {QRValue && QRValue.id && <QRCode value={QRValue.id} />}\n            <button\n                style={{\n                    marginTop: \"2rem\",\n                    marginBottom: \"2rem\",\n                    border: \"2px solid lightgray\",\n                    borderRadius: \"1rem\",\n                    padding: \"0.5rem\",\n                    width: \"10rem\",\n                }}\n                onClick={function () {\n                    setSelectedCodes([...selectedCodes, QRValue]);\n                    console.log(QRValue);\n                }}\n            >\n                Select\n            </button> */}\n\n            {/* {QRValue && (\n                <>\n                </>\n            )} */}\n\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>{QRValue.text}</h1> */}\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>To print: </h1> */}\n            {selectedCodes.length > 0 && (\n                <>\n                    <div\n                        style={{\n                            width: \"100%\",\n                            width: \"max(calc(100vw - 30rem), 80%)\",\n                            boxSizing: \"border-box\",\n                            padding: \"1rem\",\n                            display: \"grid\",\n                            gridTemplateColumns:\n                                \"repeat(auto-fill, minmax(150px, 1fr))\",\n                            gap: \"1rem\",\n                        }}\n                    >\n                        {selectedCodes.map((code) => (\n                            <div\n                                style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <QRCode size={100} value={code.id} />\n                                <p\n                                    style={{\n                                        marginTop: \"0.5rem\",\n                                        marginBottom: 0,\n                                    }}\n                                >\n                                    {code.text}\n                                </p>\n                                <button\n                                    style={{\n                                        marginTop: \"0.5rem\",\n                                        border: \"2px solid lightgray\",\n                                        borderRadius: \"1rem\",\n                                        padding: \"0.5rem\",\n                                        boxSizing: \"border-box\",\n                                        width: \"3rem\",\n                                    }}\n                                    onClick={function () {\n                                        setSelectedCodes(\n                                            selectedCodes.filter(\n                                                (c) => c.id != code.id\n                                            )\n                                        );\n                                    }}\n                                >\n                                    X\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                    <ToPrint ref={printRef}>\n                        <div\n                            style={{\n                                width: \"100%\",\n                                // width: \"max(calc(100vw - 30rem), 80%)\",\n                                boxSizing: \"border-box\",\n                                // padding: \"1rem\",\n                                // display: \"grid\",\n                                // gridTemplateColumns:\n                                //     \"repeat(auto-fill, minmax(150px, 1fr))\",\n                                // gap: \"3rem\",\n                                display: \"block\",\n                            }}\n                        >\n                            {selectedCodes.map((code) => (\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        alignItems: \"center\",\n                                        // float: \"left\",\n                                        display: \"inline-block\",\n                                        boxSizing: \"border-box\",\n                                        padding: \"1rem\",\n                                    }}\n                                >\n                                    <QRCode\n                                        style={{ margin: \"2rem\" }}\n                                        size={160}\n                                        value={code.id}\n                                    />\n                                    <p\n                                        style={{\n                                            marginTop: \"0.5rem\",\n                                            marginBottom: 0,\n                                            textAlign: \"center\",\n                                        }}\n                                    >\n                                        {code.text}\n                                    </p>\n                                </div>\n                            ))}\n                        </div>\n                    </ToPrint>\n                    <button\n                        style={{\n                            marginBottom: \"1rem\",\n                            marginTop: \"1rem\",\n                            border: \"2px solid lightgray\",\n                            borderRadius: \"1rem\",\n                            padding: \"0.5rem\",\n                            boxSizing: \"border-box\",\n                            width: \"min(30rem, 80%)\",\n                        }}\n                        onClick={handlePrint}\n                    >\n                        Print codes.\n                    </button>\n                </>\n            )}\n            <button\n                style={{\n                    marginBottom: \"1rem\",\n                    marginTop: \"1rem\",\n                    border: \"2px solid lightgray\",\n                    borderRadius: \"1rem\",\n                    padding: \"0.5rem\",\n                    boxSizing: \"border-box\",\n                    width: \"min(30rem, 80%)\",\n                }}\n                onClick={addMarkedStudents}\n            >\n                Print codes for marked students.\n            </button>\n            {/* <h1\n                style={{\n                    textAlign: \"center\",\n                    margin: 0,\n                    color: \"lightgray\",\n                    fontSize: \"1rem\",\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                }}\n            >\n                v 1.1\n            </h1> */}\n        </div>\n    );\n}\n\nexport default Print;\n","export const spreadsheetID = \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\";\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Print from \"./pages/Print\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Zoom } from \"react-toastify\";\nimport { HashRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Routes>\n                    <Route path=\"/\" element={<Print />} />\n                </Routes>\n\n                <ToastContainer\n                    position=\"bottom-center\"\n                    autoClose={3000}\n                    hideProgressBar={false}\n                    newestOnTop\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss\n                    draggable\n                    pauseOnHover\n                    pauseOnFocusLoss={false}\n                    transition={Zoom}\n                    icon={false}\n                />\n\n                <h1\n                    style={{\n                        textAlign: \"center\",\n                        margin: 0,\n                        color: \"lightgray\",\n                        fontSize: \"1rem\",\n                        marginTop: \"1rem\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    v 1.7\n                </h1>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Reader.js","pages/Scan.js","images/Logo.png","components/ToPrint.js","pages/Print.js","api/spreadsheetID.js","App.js","reportWebVitals.js","index.js"],"names":["delayCount","Reader","todaySheet","props","video","useRef","canvasRef","useState","result","setResult","black","setBlack","tick","periodic","setTimeout","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","useEffect","onScan","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","style","filter","ref","hidden","doc","GoogleSpreadsheet","require","ASCII_A","dateFormatOptions","year","month","day","scanList","scanHistory","recentList","idList","columnIndex","recentCount","shutter","addToRecentList","value","push","length","shift","createHeader","tS","idIdx","nameIdx","classIdx","checkInIdx","checkOutIdx","i","entry","getCell","valueType","findHeader","header","name","id","class","checkIn","checkOut","createIds","rowIdx","ROW_RANGE","ids","lastIdx","query","String","fromCharCode","loadCells","nullCount","slice","toastProp","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","headers","Scan","toLocaleDateString","todayDate","setTodayDate","currentTimeSec","setCurrentTimeSec","findStudentRow","ID","getCurrentTime","toLocaleTimeString","hour12","hour","minute","getTime","parseInt","Recent","map","useServiceAccountAuth","config","loadInfo","tD","found","option","sheetsByTitle","toast","warning","error","title","success","initialize","checkId","studentRowNumber","studentNumber","currentTime","idx","action","warn","saveUpdatedCells","interval","timeSec","second","dup","className","src","Logo","alt","ret","ToPrint","React","forwardRef","children","dateDiffInDays","a","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","Math","abs","floor","Print","todayRows","setTodayRows","QRValue","setQRValue","inputText","setInputText","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","printRef","handlePrint","useReactToPrint","content","findMostRecentSheetDate","sheetDate","today","sheetDateString","setDate","results","row","toLowerCase","resultString","resultObject","text","ts","getRows","rows","initializeWorker","findStudents","includes","sr","display","alignItems","flexDirection","backgroundColor","justifyContent","marginTop","marginBottom","marginRight","textAlign","margin","fontSize","placeholder","border","borderRadius","outline","padding","boxSizing","onChange","event","target","onClick","userSelect","cursor","size","gridTemplateColumns","gap","c","App","path","element","newestOnTop","rtl","pauseOnFocusLoss","transition","Zoom","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.486fc39e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport jsQR from \"jsqr\";\nimport \"../App.css\";\n\nconst PAUSE_COUNT = 5;\nlet delayCount = 0;\nfunction Reader(props) {\n    const video = useRef();\n    const canvasRef = useRef();\n    const [result, setResult] = useState();\n    const [black, setBlack] = useState(false);\n\n    function shutter() {\n        setBlack(true);\n        setTimeout(() => {\n            setBlack(false);\n        }, 300);\n    }\n\n    useEffect(\n        function () {\n            if (result) {\n                props.onScan(result.data);\n                setResult(null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [result]\n    );\n\n    useEffect(function () {\n        const inter = setInterval(() => {\n            requestAnimationFrame(tick);\n        }, 200);\n        return () => {\n            clearInterval(inter);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(\n        function () {\n            navigator.mediaDevices\n                .getUserMedia({ video: { facingMode: \"environment\" } })\n                .then(function (stream) {\n                    console.log(stream);\n                    try {\n                        video.current.srcObject = stream;\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n                        video.current.play();\n                    } catch {}\n                });\n        },\n        [video, canvasRef]\n    );\n\n    function tick() {\n        if (props.periodic())\n        {\n            shutter();\n        }\n        if (--delayCount > 0) return;\n        if (video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\n            canvasRef.current.height = video.current.videoHeight;\n            canvasRef.current.width = video.current.videoWidth;\n\n            var canvas = canvasRef.current.getContext(\"2d\");\n\n            canvas.drawImage(\n                video.current,\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var imageData = canvas.getImageData(\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\n                inversionAttempts: \"dontInvert\",\n            });\n            if (code) {\n                console.log(code.data);\n                setResult({ data: code.data, time: new Date() });\n                delayCount = PAUSE_COUNT;\n            } \n            return;\n        } \n    }\n\n    return (\n        <div>\n            <video \n                style={{\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\n                }}\n                ref={video}\n            >\n                <canvas ref={canvasRef} hidden></canvas>\n            </video>\n        </div>\n    );\n}\n\nexport default Reader;\n","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Reader from \"../components/Reader\";\r\n\r\nimport \"./Scan.css\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport config from \"../api/config\";\r\nimport header from \"../api/header\";\r\n//import { spreadsheetID } from \"../api/spreadsheetID\";\r\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nconst spreadsheetID = '12AWolV6lI99LM6NNP1bUwYanAuNDSWRJI8X4-ozM98Q';\r\nconst doc = new GoogleSpreadsheet(spreadsheetID);\r\n\r\nconst MAX_COLUMN = 26;\r\nconst ASCII_A = 65;\r\nconst dateFormatOptions = [\r\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\r\n];\r\nconst SCAN_INTERVAL = 1000;\r\nconst CHECK_INTERVAL = 5000;\r\nconst scanList = [];\r\nconst scanHistory = [];\r\nconst recentList = [];\r\nlet idList = [];\r\nlet columnIndex = {};\r\nlet todaySheet;\r\nlet recentCount = 0;\r\nlet shutter = false;\r\n\r\nfunction addToRecentList(value) {\r\n    recentList.push([recentCount, ...value]);\r\n    if (recentList.length > 5)\r\n    {\r\n        console.log(\"copy from \" + recentList.length + \" - 5\");\r\n        recentList.shift();\r\n    }\r\n    recentCount += 1;\r\n    console.log(recentList);\r\n    console.log(recentList.length);\r\n}\r\n\r\nfunction createHeader(tS)\r\n{\r\n    let idIdx = null;\r\n    let nameIdx = null;\r\n    let classIdx = null;\r\n    let checkInIdx = null;\r\n    let checkOutIdx = null;\r\n    for (let i = 0 ; i < MAX_COLUMN ; i++)\r\n    {\r\n        const entry = tS.getCell(0, i);\r\n        if (entry.valueType == null)\r\n        {\r\n            continue;\r\n        }\r\n        nameIdx = (findHeader(entry.value, header.name)) ? i : nameIdx;\r\n        idIdx = (findHeader(entry.value, header.id)) ? i : idIdx;\r\n        classIdx = (findHeader(entry.value, header.class)) ? i : classIdx;\r\n        checkInIdx = (findHeader(entry.value, header.checkIn)) ? i : checkInIdx;\r\n        checkOutIdx = (findHeader(entry.value, header.checkOut)) ? i : checkOutIdx;\r\n    }\r\n    return {id:idIdx, name:nameIdx, class:classIdx, checkIn:checkInIdx, checkOut:checkOutIdx};\r\n}\r\n\r\n\r\nasync function createIds(idIdx, tS)\r\n{\r\n    let rowIdx = 0;\r\n    const ROW_RANGE = 50;\r\n    let ids = [];\r\n    let lastIdx = null;\r\n    while (true)\r\n    {\r\n        // Read ROW_RANGE cell\r\n        const query = String.fromCharCode(ASCII_A+idIdx) + (rowIdx+1) + \":\" +\r\n                      String.fromCharCode(ASCII_A+idIdx) + (rowIdx+ROW_RANGE);\r\n        await tS.loadCells(query);\r\n        console.log(query);\r\n\r\n        let nullCount = 0;\r\n        for (let i = 0 ; i < ROW_RANGE ; i++)\r\n        {\r\n            const entry = tS.getCell(rowIdx + i, idIdx);\r\n            let id = null;\r\n            if (entry.valueType == null)\r\n            {\r\n                nullCount++;\r\n            }\r\n            else\r\n            {\r\n                id = entry.value;\r\n                lastIdx = rowIdx + i;\r\n            }\r\n            ids.push(id);\r\n        }\r\n        // If all ROW_RANGE cells are empty, stop reading\r\n        if (nullCount === ROW_RANGE)\r\n        {\r\n            break;\r\n        }\r\n        rowIdx += ROW_RANGE;\r\n    }\r\n    ids = ids.slice(0, lastIdx+1);\r\n\r\n    return ids;\r\n}\r\n\r\nconst toastProp = {\r\n    position: \"bottom-center\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n}\r\n\r\nfunction findHeader(value, headers)\r\n{\r\n    for (let h of headers)\r\n    {\r\n        if (h === value) {\r\n            return true ;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction Scan(props) {\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n\r\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\r\n\r\n    useEffect(function() {\r\n        console.log(\"Update today data \" + todayDate);\r\n    }, [todayDate]);\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            console.log('try to read sheet');\r\n            await doc.useServiceAccountAuth(config);\r\n            await doc.loadInfo(); // loads document properties and worksheets\r\n            console.log('Done');\r\n\r\n            let tD = new Date();\r\n            let found = false;\r\n            for (let option of dateFormatOptions) {\r\n                // console.log(tD.toLocaleDateString(\"en-US\", option));\r\n                if (doc.sheetsByTitle[tD.toLocaleDateString(\"en-US\", option)]) {\r\n                    found = true;\r\n                    tD = tD.toLocaleDateString(\"en-US\", option);\r\n                    break;\r\n                }\r\n            }\r\n            if (found === false)\r\n            {\r\n                toast.warning(\r\n                    `Please create the spreadsheet for today and reload the app to check in!`, toastProp);\r\n                toast.error(`❗ Could not find spreadsheet with today's date!`, toastProp);\r\n                return;\r\n            }\r\n            const tS = doc.sheetsByTitle[tD];\r\n            console.log(\"tS\");\r\n            console.log(tS);\r\n            console.log(tS.title);\r\n            todaySheet = tS;\r\n            setTodayDate(tD);\r\n\r\n            console.log(\"toasting success\");\r\n            toast.success(`✅ Ready to check in!`, toastProp);\r\n\r\n            // Find spreadsheet headers\r\n            await tS.loadCells('A1:Z1');\r\n            const header = createHeader(tS);\r\n            columnIndex = header;\r\n\r\n            // Find ID list\r\n            idList = await createIds(header.id, tS);\r\n        }\r\n        initialize();\r\n\r\n    }, []);\r\n\r\n    function findStudentRow(ID) {\r\n        console.log(\"finding student row \" + idList.length);\r\n        for (let i = 0 ; i < idList.length ; i++)\r\n        {\r\n            if (idList[i] != null && idList[i] === ID)\r\n            {\r\n                return i + 1;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function getCurrentTime() {\r\n        return new Date().toLocaleTimeString(\"en-US\", {\r\n            hour12: true,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n\r\n    async function handleScan(data) {\r\n        const tick = new Date().getTime();\r\n        console.log(\"reached function \" + tick + \" \" + data);\r\n        const id = parseInt(data);\r\n        if (id > 0)\r\n        {\r\n            scanList.push({tick:tick, id:id});\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    function checkShutter() {\r\n        const ret = shutter;\r\n        shutter = false;\r\n        return ret;\r\n    }\r\n\r\n    function Recent() {\r\n        const header = (<tr><th>Name</th><th>action</th><th>time</th></tr>);\r\n        return (<table><tbody>{header}\r\n            {recentList.map(entry => (\r\n                <tr key={entry[0]}>\r\n                    <td key=\"name\">{entry[1]}</td>\r\n                    <td key=\"action\">{entry[2]}</td>\r\n                    <td key=\"time\">{entry[3]}</td>\r\n                </tr>\r\n               ))\r\n            }\r\n        </tbody></table>)\r\n    }\r\n\r\n    // Set QR code scan updater\r\n    useEffect(() => {\r\n        async function checkId(id)\r\n        {\r\n            console.log(\"handling scanning \" + id);\r\n\r\n            // Locate student in the spreadsheet today\r\n            let studentNumber = id;\r\n            let studentRowNumber = findStudentRow(studentNumber);\r\n            const currentTime = getCurrentTime();\r\n\r\n            if (studentRowNumber == null) {\r\n                // Student does not exist\r\n                toast.error(`❗ Student ID could not be found!`, toastProp);\r\n            } else {\r\n                // Student ID is found\r\n                console.log(\"Student ID: \" + studentNumber + \" Index:\" + studentRowNumber);\r\n                const query = String.fromCharCode(ASCII_A) + (studentRowNumber) + \":\" +\r\n                              String.fromCharCode(ASCII_A+MAX_COLUMN-1) + (studentRowNumber);\r\n                await todaySheet.loadCells(query);\r\n                const idx = studentRowNumber - 1;\r\n                const name = todaySheet.getCell(idx, columnIndex.name);\r\n                const checkIn = todaySheet.getCell(idx, columnIndex.checkIn);\r\n                const checkOut = todaySheet.getCell(idx, columnIndex.checkOut);\r\n\r\n                // Determine action to take\r\n                let action = null;\r\n                if (checkIn.valueType == null) {\r\n                    // Check student in\r\n                    checkIn.value = currentTime;\r\n                    action = \"Check In\";\r\n\r\n                    toast.success(\r\n                        `👋 Checked in ${name.value} at ${currentTime}!`, toastProp);\r\n                } else if (checkOut.valueType == null) {\r\n                    // Check student out\r\n                    checkOut.value = currentTime;\r\n                    action = \"Check Out\";\r\n\r\n                    toast.success(\r\n                        `🚪 Checked out ${name.value} at ${currentTime}!`, toastProp);\r\n                } else {\r\n                    // Student check in and out are both filled\r\n                    toast.warn(\r\n                        `🟡 ${name.value} is already accounted for!`, toastProp);\r\n                }\r\n                if (action != null)\r\n                {\r\n                    console.log(action + \" \" + currentTime);\r\n                    await addToRecentList([name.value, action, currentTime]);\r\n                    await todaySheet.saveUpdatedCells();\r\n                    shutter = true;\r\n                }\r\n            }\r\n        }\r\n        const interval = setInterval(async () => {\r\n            const tick = new Date().getTime();\r\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\r\n                hour12: true,\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\"\r\n            });\r\n            setCurrentTimeSec(timeSec);\r\n            while (scanHistory.length > 0 && tick - scanHistory[0].tick > CHECK_INTERVAL)\r\n            {\r\n                scanHistory.shift();\r\n            }\r\n            while (scanList.length > 0)\r\n            {\r\n                let entry = scanList.shift();\r\n\r\n                if (tick - entry.tick > SCAN_INTERVAL)\r\n                {\r\n                   continue;\r\n                }\r\n                let dup = false;\r\n                for (let h of scanHistory)\r\n                {\r\n                    if (h.id === entry.id)\r\n                    {\r\n                        dup = true;\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if (dup)\r\n                {\r\n                    continue;\r\n                }\r\n                scanHistory.push(entry);\r\n                await checkId(entry.id);\r\n                break;\r\n            }\r\n            return () => clearInterval(interval);\r\n        }, 1000)}, []);\r\n\r\n    return (\r\n        <div className=\"scan\">\r\n            <div className=\"title\" >\r\n                <img className=\"logo\" src={Logo} alt=\"SVKS\"/>\r\n                <h1>\r\n                    SVKS Check In/Out\r\n                </h1>\r\n            </div>\r\n            <div className=\"clock\">\r\n            {todayDate} {currentTimeSec}\r\n            </div>\r\n            <div className=\"content\">\r\n                <div className=\"reader\">\r\n                    <Reader \r\n                        onScan={handleScan}\r\n                        periodic={checkShutter}/>\r\n                </div>\r\n                <div className=\"recent\">\r\n                    <h2>\r\n                        Recent Check In/Out\r\n                    </h2>\r\n                    <Recent />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scan;\r\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React from \"react\";\nexport const ToPrint = React.forwardRef((props, ref) => {\n    return (\n        <div\n            className=\"toPrint\"\n            ref={ref}\n            style={{\n                width: \"max(calc(100vw - 30rem), 80%)\",\n                // position: \"absolute\",\n                // // top: \"-100%\",\n                // zIndex: \"-100\",\n            }}\n        >\n            {props.children}\n        </div>\n    );\n});\n\nexport default ToPrint;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport { toast } from \"react-toastify\";\nimport config from \"../api/config\";\nimport { spreadsheetID } from \"../api/spreadsheetID\";\nimport Logo from \"../images/Logo.png\";\nimport { useDebounce } from \"use-debounce\";\nimport { useReactToPrint } from \"react-to-print\";\nimport { ToPrint } from \"../components/ToPrint\";\n\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\nconst doc = new GoogleSpreadsheet(spreadsheetID);\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\nfunction dateDiffInDays(a, b) {\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\n    // Discard the time and time-zone information.\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\n}\n\nconst dateFormatOptions = [\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\n];\n\nfunction Print(props) {\n//    const [todaySheet, setTodaySheet] = useState({});\n    const [todayRows, setTodayRows] = useState({});\n    const [QRValue, setQRValue] = useState(\"\");\n    const [inputText, setInputText] = useState(\"\");\n    const [searchQuery] = useDebounce(inputText, 50);\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedCodes, setSelectedCodes] = useState([]);\n\n    const printRef = useRef();\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    function findMostRecentSheetDate() {\n        let sheetDate = new Date();\n        let today = new Date();\n        let sheetDateString = null;\n        while (!sheetDateString) {\n            for (let option of dateFormatOptions) {\n                if (\n                    doc.sheetsByTitle[\n                        sheetDate.toLocaleDateString(\"en-US\", option)\n                    ]\n                ) {\n                    sheetDateString = sheetDate.toLocaleDateString(\n                        \"en-US\",\n                        option\n                    );\n                    break;\n                }\n            }\n            sheetDate.setDate(sheetDate.getDate() - 1);\n            if (dateDiffInDays(today, sheetDate) > 400) break;\n        }\n        return sheetDateString;\n    }\n\n    useEffect(function () {\n        async function initializeWorker() {\n            await doc.useServiceAccountAuth(config);\n            await doc.loadInfo(); // loads document properties and worksheets\n\n            // find today sheet\n\n            let sheetDate = findMostRecentSheetDate();\n\n            if (!doc.sheetsByTitle[sheetDate]) {\n                toast.error(`❗ Could not find data to use.`, {\n                    position: \"bottom-center\",\n                    autoClose: 300000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                let ts = doc.sheetsByTitle[sheetDate];\n//                setTodaySheet(ts);\n                const rows = await ts.getRows();\n                setTodayRows(rows);\n\n                toast.success(`✅ Found ID data.`, {\n                    position: \"bottom-center\",\n                    autoClose: 3000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        }\n        initializeWorker();\n    }, []);\n\n    useEffect(\n        () => {\n            async function findStudents(text) {\n                let results = [];\n\n                for (const row of todayRows) {\n                    if (results.length > 4) break;\n                    if (\n                        (row[\"ID\"] + \"\").includes(text) ||\n                        row[\"이름\"]?.includes(text)\n                    ) {\n                        let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                        let resultObject = {\n                            text: resultString,\n                            name: row[\"이름\"],\n                            id: row[\"ID\"],\n                        };\n                        results.push(resultObject);\n                    }\n                }\n                return results;\n            }\n            async function query() {\n                if (searchQuery) {\n                    let sr = await findStudents(searchQuery);\n                    if (sr.length === 1) {\n                        setQRValue(sr[0]);\n                    }\n                    if (sr.length > 0) setSearchResults(sr);\n                } else {\n                    setQRValue({});\n                    setSearchResults([]);\n                }\n            }\n            query();\n        },\n        [searchQuery, todayRows]\n    );\n\n\n    async function addMarkedStudents() {\n        let results = [];\n\n        for (const row of todayRows) {\n            if (row[\"Print\"]?.toLowerCase() === \"x\") {\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                let resultObject = {\n                    text: resultString,\n                    name: row[\"이름\"],\n                    id: row[\"ID\"],\n                };\n                results.push(resultObject);\n            }\n        }\n        setSelectedCodes([...selectedCodes, ...results]);\n    }\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                backgroundColor: \"white\",\n            }}\n        >\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"row\",\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                }}\n            >\n                <img\n                    style={{ height: \"3rem\", marginRight: \"1rem\" }}\n                    src={Logo}\n                    alt=\"logo\"\n                ></img>\n                <h1 style={{ textAlign: \"center\", margin: 0 }}>\n                    Print QR Codes\n                </h1>\n            </div>\n            <div\n                style={{\n                    marginTop: \"4rem\",\n                    marginBottom: \"4rem\",\n                    width: \"max(calc(100vw - 30rem), 80%)\",\n                    fontSize: \"1.5rem\",\n                }}\n            >\n                <input\n                    placeholder={\"Search for student or enter a number...\"}\n                    style={{\n                        width: \"100%\",\n                        fontSize: \"1.5rem\",\n                        border: \"2px solid lightgray\",\n                        borderRadius: \"1rem\",\n                        outline: \"none\",\n                        padding: \"1rem\",\n                        boxSizing: \"border-box\",\n                        textAlign: \"center\",\n                    }}\n                    value={inputText}\n                    onChange={(event) => {\n                        setInputText(event.target.value);\n                    }}\n                ></input>\n\n                {searchResults.map((result) => {\n                    return (\n                        <div\n                            onClick={function () {\n                                // setQRValue(result.id);\n                                // setInputText(result.name);\n                                // function () {\n                                setSelectedCodes([...selectedCodes, result]);\n                                // console.log(QRValue);\n                                // }\n                            }}\n                            style={{\n                                width: \"100%\",\n                                marginTop: \"0.5rem\",\n                                border: \"1px solid lightgray\",\n                                borderRadius: \"1rem\",\n                                padding: \"0.5rem\",\n                                boxSizing: \"border-box\",\n                                userSelect: \"none\",\n                                cursor: \"pointer\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <h4\n                                style={{\n                                    marginRight: \"2rem\",\n                                    marginTop: 0,\n                                    marginBottom: 0,\n                                }}\n                            >\n                                {result.text}\n                            </h4>\n                            {QRValue.id && (\n                                <QRCode size={50} value={QRValue.id} />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {/* {QRValue && QRValue.id && <QRCode value={QRValue.id} />}\n            <button\n                style={{\n                    marginTop: \"2rem\",\n                    marginBottom: \"2rem\",\n                    border: \"2px solid lightgray\",\n                    borderRadius: \"1rem\",\n                    padding: \"0.5rem\",\n                    width: \"10rem\",\n                }}\n                onClick={function () {\n                    setSelectedCodes([...selectedCodes, QRValue]);\n                    console.log(QRValue);\n                }}\n            >\n                Select\n            </button> */}\n\n            {/* {QRValue && (\n                <>\n                </>\n            )} */}\n\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>{QRValue.text}</h1> */}\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>To print: </h1> */}\n            {selectedCodes.length > 0 && (\n                <>\n                    <div\n                        style={{\n                            width: \"max(calc(100vw - 30rem), 80%)\",\n                            boxSizing: \"border-box\",\n                            padding: \"1rem\",\n                            display: \"grid\",\n                            gridTemplateColumns:\n                                \"repeat(auto-fill, minmax(150px, 1fr))\",\n                            gap: \"1rem\",\n                        }}\n                    >\n                        {selectedCodes.map((code) => (\n                            <div\n                                style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <QRCode size={100} value={code.id} />\n                                <p\n                                    style={{\n                                        marginTop: \"0.5rem\",\n                                        marginBottom: 0,\n                                    }}\n                                >\n                                    {code.text}\n                                </p>\n                                <button\n                                    style={{\n                                        marginTop: \"0.5rem\",\n                                        border: \"2px solid lightgray\",\n                                        borderRadius: \"1rem\",\n                                        padding: \"0.5rem\",\n                                        boxSizing: \"border-box\",\n                                        width: \"3rem\",\n                                    }}\n                                    onClick={function () {\n                                        setSelectedCodes(\n                                            selectedCodes.filter(\n                                                (c) => parseInt(c.id) !== parseInt(code.id)\n                                            )\n                                        );\n                                    }}\n                                >\n                                    X\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                    <ToPrint ref={printRef}>\n                        <div\n                            style={{\n                                width: \"100%\",\n                                // width: \"max(calc(100vw - 30rem), 80%)\",\n                                boxSizing: \"border-box\",\n                                // padding: \"1rem\",\n                                // display: \"grid\",\n                                // gridTemplateColumns:\n                                //     \"repeat(auto-fill, minmax(150px, 1fr))\",\n                                // gap: \"3rem\",\n                                display: \"block\",\n                            }}\n                        >\n                            {selectedCodes.map((code) => (\n                                <div\n                                    style={{\n                                        flexDirection: \"column\",\n                                        alignItems: \"center\",\n                                        // float: \"left\",\n                                        display: \"inline-block\",\n                                        boxSizing: \"border-box\",\n                                        padding: \"1rem\",\n                                    }}\n                                >\n                                    <QRCode\n                                        style={{ margin: \"2rem\" }}\n                                        size={160}\n                                        value={code.id}\n                                    />\n                                    <p\n                                        style={{\n                                            marginTop: \"0.5rem\",\n                                            marginBottom: 0,\n                                            textAlign: \"center\",\n                                        }}\n                                    >\n                                        {code.text}\n                                    </p>\n                                </div>\n                            ))}\n                        </div>\n                    </ToPrint>\n                    <button\n                        style={{\n                            marginBottom: \"1rem\",\n                            marginTop: \"1rem\",\n                            border: \"2px solid lightgray\",\n                            borderRadius: \"1rem\",\n                            padding: \"0.5rem\",\n                            boxSizing: \"border-box\",\n                            width: \"min(30rem, 80%)\",\n                        }}\n                        onClick={handlePrint}\n                    >\n                        Print codes.\n                    </button>\n                </>\n            )}\n            <button\n                style={{\n                    marginBottom: \"1rem\",\n                    marginTop: \"1rem\",\n                    border: \"2px solid lightgray\",\n                    borderRadius: \"1rem\",\n                    padding: \"0.5rem\",\n                    boxSizing: \"border-box\",\n                    width: \"min(30rem, 80%)\",\n                }}\n                onClick={addMarkedStudents}\n            >\n                Print codes for marked students.\n            </button>\n            {/* <h1\n                style={{\n                    textAlign: \"center\",\n                    margin: 0,\n                    color: \"lightgray\",\n                    fontSize: \"1rem\",\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                }}\n            >\n                v 1.1\n            </h1> */}\n        </div>\n    );\n}\n\nexport default Print;\n","export const spreadsheetID = \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\";\n","import \"./App.css\";\nimport Scan from \"./pages/Scan\";\nimport Print from \"./pages/Print\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Zoom } from \"react-toastify\";\nimport { HashRouter as Router, Routes, Route} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Routes>\n                    <Route path=\"/\" element={<Scan />} />\n                    <Route path=\"print\" element={<Print />} />\n                </Routes>\n\n                <ToastContainer\n                    position=\"bottom-center\"\n                    autoClose={3000}\n                    hideProgressBar={false}\n                    newestOnTop\n                    closeOnClick\n                    rtl={false}\n                    draggable\n                    pauseOnHover\n                    pauseOnFocusLoss={false}\n                    transition={Zoom}\n                    icon={false}\n                />\n                <h2>\n                    v 1.8.1\n                </h2>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}